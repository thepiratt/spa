#include <iostream>

using namespace std;

int rotacije = 0;
int poredjenja = 0;

void SelectionSort(int* niz, int v)
{
	int i, j, minIndex, pom;
	for (i = 0; i < v - 1; i++)
	{
		minIndex = i;
		for (j = i + 1; j < v; j++)
		{
			poredjenja++;
			if (niz[j] < niz[minIndex])
			{
				minIndex = j;
			}
		}
		if (minIndex != i)
		{
			cout << "rotacija: N[i=" << i << "] -> " << niz[i] << " i N[minI=" << minIndex << "] -> \t" << niz[minIndex] << " " << endl;
			rotacije++;
			pom = niz[i];
			niz[i] = niz[minIndex];
			niz[minIndex] = pom;
			
		}
	}

	cout << "Selection sort: sortiranje zavrseno" << endl;
}

void Insertion(int* niz, int v)
{
	for (int i = 1; i < v; i++)
	{
		int j = i;

		while (poredjenja++ > -1 && j > 0 && niz[j - 1] > niz[j])
		{
			rotacije++;
			int pom = niz[j];
			niz[j] = niz[j - 1];
			niz[j - 1] = pom;
			j--;
		}
	}
	cout << "Insertion sort: sortiranje zavrseno" << endl;
}


	void Swap(int* N, const int i, const int j)
	{	rotacije++;
		cout << "rotacija: N[i=" << i << "] -> " << N[i] << " i N[j=" << i << "] -> \t" << N[j] << " " << endl;
		if (i != j)
		{
		
			int temp = N[i];
			N[i] = N[j];
			N[j] = temp;
		}
	}

	void Rekurzija(int* N, const int low, const int high)
	{
		if (low < high)
		{
			cout << "\nQuickSort: low=" << low << ", " << "high=" << high << endl;
			int pivotloc = low;
			int pivotkey = N[low];
			for (int i = low + 1; i <= high; i++)
			{
				if (N[i] < pivotkey)
				{
					pivotloc++;
					Swap(N, pivotloc, i);
				}
			}

			Swap(N, low, pivotloc);

			Rekurzija(N, low, pivotloc - 1);
			Rekurzija(N, pivotloc + 1, high);
		}
	}









void main()
{
	int* n = new int[] {587,	586,	580,	579,	578	};
	//int* n = new int[] {15, 30, 40, 60, 100, 105, 524, 554, 555, 999	};
	//int* n = new int[] { 500, 446, 40, 60, 974, 345, 746, 246, 665, 244};
	SelectionSort(n, 5);
	//Insertion(n, 5);

	//Rekurzija(n, 0, 4);

	cout << "poredjenja: " << poredjenja << endl;
	cout << "rotacije: " << rotacije << endl;

	for (int i = 0; i < 5; ++i)
	{
		cout << n[i] << " | ";
	}
}
